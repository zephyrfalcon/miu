TODO:

- handle data
- handle unrecognized opcodes (i.e. raise an error)
- if there's only one version of an opcode, allow omitting the /mode
- parse strings like "LDA #$01"
  - in the end, it should be possible to give Miu a list of "normally"
    formatted assembler instructions, and she will translate these to Prolog
    terms, then assemble
- conversely, translate terms like lda(0x01)/immediate to "LDA #$01"
- refactor

- in opcodes that take a single byte, allow hi(Value) and lo(Value) (or
  similar) to use the high or low byte of a known value. e.g.

    Address = 0xC000,
    lda(hi(Address))/immediate,
    ...

- all of the stuff currently in miu.pl is basically the assembler code, which
  can go in a separate module. miu.pl can then be the main program that takes
  input (in various forms) and produces output.

- split up tests

- add formatting for labels and other constructs 

- start figuring out command line interface
  - and how to implement this in SWIPL

